{"ast":null,"code":"var _jsxFileName = \"/Users/iris/Desktop/skand.frontend-tasks/src/containers/login/Login.jsx\";\nimport React, { useState } from \"react\";\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\n/** @jsx jsx */\n\nimport { jsx } from '@emotion/react';\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap'; //import server from '../../mockServer/index';\n\nimport * as actionType from '../../store/actions';\n\nconst Login = props => {\n  const [displayError, setDisplayError] = useState(false);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n      fetch('/api/v2/users/tokens', {\n        method: 'POST',\n        body: JSON.stringify(values)\n      }).then(res => {\n        if (res.status === 200) {\n          props.onLogin(res.headers.map.authorization);\n        } else {\n          setDisplayError(true);\n        }\n      });\n    }\n  }); // const validate = (values) => {\n  //   let errors = {};\n  //   const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  //   if (!values.email) {\n  //     errors.email = \"Cannot be blank\";\n  //   } else if (!regex.test(values.email)) {\n  //     errors.email = \"Invalid email format\";\n  //   }\n  //   if (!values.password) {\n  //     errors.password = \"Cannot be blank\";\n  //   } else if (values.password.length < 4) {\n  //     errors.password = \"Password must be more than 4 characters\";\n  //   }\n  //   return errors;\n  // };\n\n  return jsx(\"div\", {\n    css: {\n      backgroundColor: '#bbdfc8',\n      height: \"100vh\",\n      width: '100vw',\n      textAlign: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, jsx(Form, {\n    onSubmit: formik.handleSubmit,\n    css: {\n      border: 'solid 2px gray',\n      borderRadius: '8px',\n      width: '400px',\n      padding: '20px 40px',\n      display: 'flex',\n      flexDirection: 'column',\n      margin: 'auto',\n      backgroundColor: '#f0e5d8',\n      boxShadow: '0 10px 50px #555',\n      '@media(max-width: 600px)': {\n        width: '100%',\n        height: '100%',\n        padding: '20px 40px',\n        boxShadow: '0 0 0 #fff',\n        borderRadius: '0px',\n        border: '0px'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, jsx(\"h2\", {\n    css: {\n      paddingBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Welcome\"), jsx(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, jsx(Label, {\n    sm: 3,\n    for: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Email\"), jsx(Col, {\n    sm: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, jsx(Input, {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Please enter your email\",\n    onChange: formik.handleChange,\n    value: formik.values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }))), jsx(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, jsx(Label, {\n    sm: 3,\n    for: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Password\"), jsx(Col, {\n    sm: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, jsx(Input, {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Please enter your password\",\n    onChange: formik.handleChange,\n    value: formik.values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }))), jsx(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Submit\")), jsx(\"p\", {\n    css: {\n      display: displayError,\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Invalid email or password\"));\n};\n\nconst mapStateToProps = state => {\n  return {\n    userToken: state.authReducer.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: token => dispatch({\n      type: actionType.LOGIN,\n      token: token\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/iris/Desktop/skand.frontend-tasks/src/containers/login/Login.jsx"],"names":["React","useState","useFormik","connect","jsx","Button","Form","FormGroup","Label","Input","Col","actionType","Login","props","displayError","setDisplayError","formik","initialValues","email","password","onSubmit","values","alert","JSON","stringify","fetch","method","body","then","res","status","onLogin","headers","map","authorization","backgroundColor","height","width","textAlign","display","flexDirection","alignItems","handleSubmit","border","borderRadius","padding","margin","boxShadow","paddingBottom","handleChange","color","mapStateToProps","state","userToken","authReducer","token","mapDispatchToProps","dispatch","type","LOGIN"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\n//import server from '../../mockServer/index';\nimport * as actionType from '../../store/actions'\n\n\nconst Login = (props) => {\n\n  const [displayError, setDisplayError] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n      fetch('/api/v2/users/tokens', {\n        method: 'POST',\n        body: JSON.stringify(values)\n      })\n      .then(\n        (res) => { \n          if (res.status === 200){\n            props.onLogin(res.headers.map.authorization);\n          } else {\n            setDisplayError(true);\n          }\n        }\n      );\n    }\n  });\n\n  // const validate = (values) => {\n  //   let errors = {};\n  //   const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n  //   if (!values.email) {\n  //     errors.email = \"Cannot be blank\";\n  //   } else if (!regex.test(values.email)) {\n  //     errors.email = \"Invalid email format\";\n  //   }\n  //   if (!values.password) {\n  //     errors.password = \"Cannot be blank\";\n  //   } else if (values.password.length < 4) {\n  //     errors.password = \"Password must be more than 4 characters\";\n  //   }\n  //   return errors;\n  // };\n\n  return (\n    <div \n      css={{\n        backgroundColor:'#bbdfc8',\n        height: \"100vh\",\n        width: '100vw',\n        textAlign: 'center',\n        display:'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      }}>\n      <Form\n        onSubmit={formik.handleSubmit}\n        css={{\n          border:'solid 2px gray',\n          borderRadius: '8px',\n          width: '400px',\n          padding: '20px 40px',\n          display: 'flex',\n          flexDirection: 'column',\n          margin: 'auto',\n          backgroundColor: '#f0e5d8',\n          boxShadow: '0 10px 50px #555',\n          '@media(max-width: 600px)': {\n            width: '100%',\n            height:'100%',\n            padding: '20px 40px',\n            boxShadow: '0 0 0 #fff',\n            borderRadius: '0px',\n            border:'0px',\n          }\n        }}\n      >\n        <h2\n          css={{paddingBottom: '20px'}}\n        >Welcome</h2>\n        <FormGroup row>\n          <Label sm={3} for=\"email\">Email</Label>\n          <Col sm={9}>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Please enter your email\"\n              onChange={formik.handleChange}\n              value={formik.values.email}\n            />\n          </Col>\n        </FormGroup>\n        <FormGroup row>\n          <Label sm={3} for=\"password\">Password</Label> \n          <Col sm={9}>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Please enter your password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n          </Col>\n        </FormGroup>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n      <p css={{display: displayError, color: 'red'}}>Invalid email or password</p>\n    </div>\n  )\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userToken: state.authReducer.token\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: (token) => dispatch({type: actionType.LOGIN, token:token})\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}