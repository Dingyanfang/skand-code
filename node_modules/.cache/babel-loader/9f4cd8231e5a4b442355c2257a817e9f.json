{"ast":null,"code":"var _jsxFileName = \"/Users/iris/Desktop/skand.frontend-tasks/src/containers/login/Login.jsx\";\nimport React, { useState } from \"react\";\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { connect } from 'react-redux';\n/** @jsx jsx */\n\nimport { jsx } from '@emotion/react';\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\nimport * as actionType from '../../store/actions';\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().min(4, 'Password is too Short!').max(30, 'Password is too Long!').required('Required')\n});\n\nconst Login = props => {\n  const [displayError, setDisplayError] = useState('none');\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values, {\n      resetForm\n    }) => {\n      //alert(JSON.stringify(values, null, 2));\n      fetch('/api/v2/users/tokens', {\n        method: 'POST',\n        body: JSON.stringify(values)\n      }).then(res => {\n        if (res.status === 200) {\n          setDisplayError('none');\n          props.onLogin(res.headers.map.authorization);\n          console.log(res.headers.map.authorization);\n          window.location = \"/users\";\n        } else {\n          setDisplayError('block');\n          resetForm();\n        }\n      });\n    }\n  });\n  return jsx(\"div\", {\n    css: {\n      backgroundColor: '#bbdfc8',\n      height: \"100vh\",\n      width: '100vw',\n      textAlign: 'center',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, jsx(Form, {\n    onSubmit: formik.handleSubmit,\n    css: {\n      border: 'solid 2px gray',\n      borderRadius: '8px',\n      width: '400px',\n      padding: '20px 40px',\n      display: 'flex',\n      flexDirection: 'column',\n      margin: 'auto',\n      backgroundColor: '#f0e5d8',\n      boxShadow: '0 10px 50px #555',\n      '@media(max-width: 600px)': {\n        width: '100%',\n        height: '100%',\n        padding: '20px 40px',\n        boxShadow: '0 0 0 #fff',\n        borderRadius: '0px',\n        border: '0px'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, jsx(\"h2\", {\n    css: {\n      paddingBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Welcome\"), jsx(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, jsx(Label, {\n    sm: 3,\n    for: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Email\"), jsx(Col, {\n    sm: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, jsx(Input, {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Please enter your email\",\n    onChange: formik.handleChange,\n    value: formik.values.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), formik.touched.email && formik.errors.email ? jsx(\"div\", {\n    css: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 10\n    }\n  }, formik.errors.email) : null), jsx(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, jsx(Label, {\n    sm: 3,\n    for: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Password\"), jsx(Col, {\n    sm: 9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, jsx(Input, {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Please enter your password\",\n    onChange: formik.handleChange,\n    value: formik.values.password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), formik.touched.password && formik.errors.password ? jsx(\"div\", {\n    css: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 10\n    }\n  }, formik.errors.password) : null), jsx(\"p\", {\n    css: {\n      display: displayError,\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, \"Invalid email or password\"), jsx(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.authReducer.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: token => dispatch({\n      type: actionType.LOGIN,\n      token: token\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/iris/Desktop/skand.frontend-tasks/src/containers/login/Login.jsx"],"names":["React","useState","useFormik","Yup","connect","jsx","Button","Form","FormGroup","Label","Input","Col","actionType","LoginSchema","object","shape","email","string","required","password","min","max","Login","props","displayError","setDisplayError","formik","initialValues","validationSchema","onSubmit","values","resetForm","fetch","method","body","JSON","stringify","then","res","status","onLogin","headers","map","authorization","console","log","window","location","backgroundColor","height","width","textAlign","display","flexDirection","alignItems","handleSubmit","border","borderRadius","padding","margin","boxShadow","paddingBottom","handleChange","touched","errors","color","mapStateToProps","state","token","authReducer","mapDispatchToProps","dispatch","type","LOGIN"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { connect } from 'react-redux';\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\nimport * as actionType from '../../store/actions'\n\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  password: Yup.string()\n    .min(4, 'Password is too Short!')\n    .max(30, 'Password is too Long!')\n    .required('Required'),\n});\n\nconst Login = (props) => {\n\n  const [displayError, setDisplayError] = useState('none');\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: LoginSchema,\n    onSubmit: (values, {resetForm}) => {\n      //alert(JSON.stringify(values, null, 2));\n      fetch('/api/v2/users/tokens', {\n        method: 'POST',\n        body: JSON.stringify(values)\n      })\n      .then(\n        (res) => { \n          if (res.status === 200){\n            setDisplayError('none');\n            props.onLogin(res.headers.map.authorization);\n            console.log(res.headers.map.authorization)\n            window.location = \"/users\";\n          } else {\n            setDisplayError('block');\n            resetForm();\n          }\n        }\n      );\n    }\n  });\n\n  \n  return (\n    <div \n      css={{\n        backgroundColor:'#bbdfc8',\n        height: \"100vh\",\n        width: '100vw',\n        textAlign: 'center',\n        display:'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      }}>\n      <Form\n        onSubmit={formik.handleSubmit}\n        css={{\n          border:'solid 2px gray',\n          borderRadius: '8px',\n          width: '400px',\n          padding: '20px 40px',\n          display: 'flex',\n          flexDirection: 'column',\n          margin: 'auto',\n          backgroundColor: '#f0e5d8',\n          boxShadow: '0 10px 50px #555',\n          '@media(max-width: 600px)': {\n            width: '100%',\n            height:'100%',\n            padding: '20px 40px',\n            boxShadow: '0 0 0 #fff',\n            borderRadius: '0px',\n            border:'0px',\n          }\n        }}\n      >\n        <h2\n          css={{paddingBottom: '20px'}}\n        >Welcome</h2>\n        <FormGroup row>\n          <Label sm={3} for=\"email\">Email</Label>\n          <Col sm={9}>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Please enter your email\"\n              onChange={formik.handleChange}\n              value={formik.values.email}\n            />\n          </Col>\n          {formik.touched.email && formik.errors.email ? (\n         <div css={{color: 'red'}}>{formik.errors.email}</div>\n       ) : null}\n        </FormGroup>\n        <FormGroup row>\n          <Label sm={3} for=\"password\">Password</Label> \n          <Col sm={9}>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Please enter your password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n          </Col>\n          {formik.touched.password && formik.errors.password ? (\n         <div css={{color: 'red'}}>{formik.errors.password}</div>\n       ) : null}\n        </FormGroup>\n        <p css={{display: displayError, color: 'red'}}>Invalid email or password</p>\n        <Button type=\"submit\">Submit</Button>\n      </Form>\n    </div>\n  )\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.authReducer.token\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: (token) => dispatch({type: actionType.LOGIN, token:token})\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}