{"ast":null,"code":"import _objectSpread from\"/Users/iris/Desktop/skand.frontend-tasks/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{Response}from'miragejs';import isEqual from'lodash/isEqual';var addRoutesToMockServer=function addRoutesToMockServer(mockServer){// eslint-disable-next-line no-param-reassign\nmockServer.namespace='/api/v2';// Users CRUD\nmockServer.get('/users',function(schema,request){var jwt=request.requestHeaders.authorization;if(jwt==='null'||!jwt){return new Response(401,{},{message:'Please Login'});}return schema.users.all();});mockServer.get('/users/:id',function(schema,request){var jwt=request.requestHeaders.authorization;if(jwt==='null'||!jwt){return new Response(401,{},{message:'Please Login'});}var user=schema.users.find(request.params.id);if(!user){return new Response(500,{},{message:\"No user with id: \".concat(request.params.id,\" found\")});}return user;});mockServer.post('/users',function(schema,request){var jwt=request.requestHeaders.authorization;if(jwt==='null'||!jwt){return new Response(401,{},{message:'Please Login'});}var attributes=JSON.parse(request.requestBody);var idAppendedAttributes=_objectSpread({},attributes,{id:1000});return schema.users.create(idAppendedAttributes);});mockServer.patch('/users/:id',function(schema,request){var jwt=request.requestHeaders.authorization;if(jwt==='null'||!jwt){return new Response(401,{},{message:'Please Login'});}var user=schema.users.find(request.params.id);if(!user){return new Response(500,{},{message:\"No user with id: \".concat(request.params.id,\" found\")});}var attributes=JSON.parse(request.requestBody);return user.update(attributes);});mockServer.delete('/users/:id',function(schema,request){var jwt=request.requestHeaders.authorization;if(jwt==='null'||!jwt){return new Response(401,{},{message:'Please Login'});}var user=schema.users.find(request.params.id);if(!user){return new Response(500,{},{message:\"No user with id: \".concat(request.params.id,\" found\")});}user.destroy();return new Response(200,{},{});});// Session Login / Logout\nmockServer.post('/users/tokens',function(schema,request){var acceptedParam={email:'test@skand.io',password:'password'};var requestBody=JSON.parse(request.requestBody);var headers={Authorization:'123abc456def789ghi'};var errorMessage={message:'Email does not match the password'};var responseData='ok';var expectedParamMatchesRequest=!!acceptedParam&&isEqual(requestBody,acceptedParam);if(!expectedParamMatchesRequest){return new Response(401,{},errorMessage);}return new Response(200,headers,responseData);});mockServer.delete('/users/tokens',function(){var headers={'Content-Type':'application/json; charset=utf-8'};var responseData={};return new Response(200,headers,responseData);});};export default addRoutesToMockServer;","map":{"version":3,"sources":["/Users/iris/Desktop/skand.frontend-tasks/src/mockServer/addRoutesToMockServer.js"],"names":["Response","isEqual","addRoutesToMockServer","mockServer","namespace","get","schema","request","jwt","requestHeaders","authorization","message","users","all","user","find","params","id","post","attributes","JSON","parse","requestBody","idAppendedAttributes","create","patch","update","delete","destroy","acceptedParam","email","password","headers","Authorization","errorMessage","responseData","expectedParamMatchesRequest"],"mappings":"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","sourcesContent":["import { Response } from 'miragejs';\nimport isEqual from 'lodash/isEqual';\n\nconst addRoutesToMockServer = (mockServer) => {\n  // eslint-disable-next-line no-param-reassign\n  mockServer.namespace = '/api/v2';\n\n  // Users CRUD\n  mockServer.get('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n    return schema.users.all();\n  });\n  mockServer.get('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    return user;\n  });\n  mockServer.post('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    const idAppendedAttributes = { ...attributes, id: 1000 };\n    return schema.users.create(idAppendedAttributes);\n  });\n  mockServer.patch('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    return user.update(attributes);\n  });\n  mockServer.delete('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    user.destroy();\n    return new Response(200, {}, {});\n  });\n\n  // Session Login / Logout\n  mockServer.post('/users/tokens', (schema, request) => {\n    const acceptedParam = { email: 'test@skand.io', password: 'password' };\n    const requestBody = JSON.parse(request.requestBody);\n    const headers = { Authorization: '123abc456def789ghi' };\n    const errorMessage = { message: 'Email does not match the password' };\n    const responseData = 'ok';\n\n    const expectedParamMatchesRequest = !!acceptedParam && isEqual(requestBody, acceptedParam);\n\n    if (!expectedParamMatchesRequest) {\n      return new Response(401, {}, errorMessage);\n    }\n\n    return new Response(200, headers, responseData);\n  });\n\n  mockServer.delete('/users/tokens', () => {\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    const responseData = {};\n\n    return new Response(200, headers, responseData);\n  });\n};\n\nexport default addRoutesToMockServer;\n"]},"metadata":{},"sourceType":"module"}