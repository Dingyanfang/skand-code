{"ast":null,"code":"import { Response } from 'miragejs';\nimport isEqual from 'lodash/isEqual';\n\nconst addRoutesToMockServer = mockServer => {\n  // eslint-disable-next-line no-param-reassign\n  mockServer.namespace = '/api/v2'; // Users CRUD\n\n  mockServer.get('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, {\n        message: 'Please Login'\n      });\n    }\n\n    return schema.users.all();\n  });\n  mockServer.get('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, {\n        message: 'Please Login'\n      });\n    }\n\n    const user = schema.users.find(request.params.id);\n\n    if (!user) {\n      return new Response(500, {}, {\n        message: `No user with id: ${request.params.id} found`\n      });\n    }\n\n    return user;\n  });\n  mockServer.post('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, {\n        message: 'Please Login'\n      });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    const idAppendedAttributes = { ...attributes,\n      id: 1000\n    };\n    return schema.users.create(idAppendedAttributes);\n  });\n  mockServer.patch('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, {\n        message: 'Please Login'\n      });\n    }\n\n    const user = schema.users.find(request.params.id);\n\n    if (!user) {\n      return new Response(500, {}, {\n        message: `No user with id: ${request.params.id} found`\n      });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    return user.update(attributes);\n  });\n  mockServer.delete('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, {\n        message: 'Please Login'\n      });\n    }\n\n    const user = schema.users.find(request.params.id);\n\n    if (!user) {\n      return new Response(500, {}, {\n        message: `No user with id: ${request.params.id} found`\n      });\n    }\n\n    user.destroy();\n    return new Response(200, {}, {});\n  }); // Session Login / Logout\n\n  mockServer.post('/users/tokens', (schema, request) => {\n    const acceptedParam = {\n      email: 'test@skand.io',\n      password: 'password'\n    };\n    const requestBody = JSON.parse(request.requestBody);\n    const headers = {\n      Authorization: '123abc456def789ghi'\n    };\n    const errorMessage = {\n      message: 'Email does not match the password'\n    };\n    const responseData = 'ok';\n    const expectedParamMatchesRequest = !!acceptedParam && isEqual(requestBody, acceptedParam);\n\n    if (!expectedParamMatchesRequest) {\n      return new Response(401, {}, errorMessage);\n    }\n\n    return new Response(200, headers, responseData);\n  });\n  mockServer.delete('/users/tokens', () => {\n    const headers = {\n      'Content-Type': 'application/json; charset=utf-8'\n    };\n    const responseData = {};\n    return new Response(200, headers, responseData);\n  });\n};\n\nexport default addRoutesToMockServer;","map":{"version":3,"sources":["/Users/iris/Desktop/skand.frontend-tasks/src/mockServer/addRoutesToMockServer.js"],"names":["Response","isEqual","addRoutesToMockServer","mockServer","namespace","get","schema","request","jwt","requestHeaders","authorization","message","users","all","user","find","params","id","post","attributes","JSON","parse","requestBody","idAppendedAttributes","create","patch","update","delete","destroy","acceptedParam","email","password","headers","Authorization","errorMessage","responseData","expectedParamMatchesRequest"],"mappings":"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","sourcesContent":["import { Response } from 'miragejs';\nimport isEqual from 'lodash/isEqual';\n\nconst addRoutesToMockServer = (mockServer) => {\n  // eslint-disable-next-line no-param-reassign\n  mockServer.namespace = '/api/v2';\n\n  // Users CRUD\n  mockServer.get('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n    return schema.users.all();\n  });\n  mockServer.get('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    return user;\n  });\n  mockServer.post('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    const idAppendedAttributes = { ...attributes, id: 1000 };\n    return schema.users.create(idAppendedAttributes);\n  });\n  mockServer.patch('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    return user.update(attributes);\n  });\n  mockServer.delete('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    user.destroy();\n    return new Response(200, {}, {});\n  });\n\n  // Session Login / Logout\n  mockServer.post('/users/tokens', (schema, request) => {\n    const acceptedParam = { email: 'test@skand.io', password: 'password' };\n    const requestBody = JSON.parse(request.requestBody);\n    const headers = { Authorization: '123abc456def789ghi' };\n    const errorMessage = { message: 'Email does not match the password' };\n    const responseData = 'ok';\n\n    const expectedParamMatchesRequest = !!acceptedParam && isEqual(requestBody, acceptedParam);\n\n    if (!expectedParamMatchesRequest) {\n      return new Response(401, {}, errorMessage);\n    }\n\n    return new Response(200, headers, responseData);\n  });\n\n  mockServer.delete('/users/tokens', () => {\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    const responseData = {};\n\n    return new Response(200, headers, responseData);\n  });\n};\n\nexport default addRoutesToMockServer;\n"]},"metadata":{},"sourceType":"module"}