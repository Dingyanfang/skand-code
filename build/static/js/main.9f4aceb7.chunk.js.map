{"version":3,"sources":["App.js","mockServer/addRoutesToMockServer.js","mockServer/users/index.js","mockServer/index.js","serviceWorker.js","index.js","logo.svg"],"names":["App","className","src","logo","alt","href","target","rel","addRoutesToMockServer","mockServer","namespace","get","schema","request","jwt","requestHeaders","authorization","users","all","Response","message","user","find","params","id","post","attributes","JSON","parse","requestBody","idAppendedAttributes","create","patch","update","delete","destroy","acceptedParam","email","password","isEqual","Authorization","getUsers","stringify","userData","Server","models","Model","seeds","server","data","forEach","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.9f4aceb7.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { Response } from 'miragejs';\nimport isEqual from 'lodash/isEqual';\n\nconst addRoutesToMockServer = (mockServer) => {\n  // eslint-disable-next-line no-param-reassign\n  mockServer.namespace = '/api/v2';\n\n  // Users CRUD\n  mockServer.get('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n    return schema.users.all();\n  });\n  mockServer.get('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    return user;\n  });\n  mockServer.post('/users', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    const idAppendedAttributes = { ...attributes, id: 1000 };\n    return schema.users.create(idAppendedAttributes);\n  });\n  mockServer.patch('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    const attributes = JSON.parse(request.requestBody);\n    return user.update(attributes);\n  });\n  mockServer.delete('/users/:id', (schema, request) => {\n    const jwt = request.requestHeaders.authorization;\n    if (jwt === 'null' || !jwt) {\n      return new Response(401, {}, { message: 'Please Login' });\n    }\n\n    const user = schema.users.find(request.params.id);\n    if (!user) {\n      return new Response(500, {}, { message: `No user with id: ${request.params.id} found` });\n    }\n\n    user.destroy();\n    return new Response(200, {}, {});\n  });\n\n  // Session Login / Logout\n  mockServer.post('/users/tokens', (schema, request) => {\n    const acceptedParam = { email: 'test@skand.io', password: 'password' };\n    const requestBody = JSON.parse(request.requestBody);\n    const headers = { Authorization: '123abc456def789ghi' };\n    const errorMessage = { message: 'Email does not match the password' };\n    const responseData = 'ok';\n\n    const expectedParamMatchesRequest = !!acceptedParam && isEqual(requestBody, acceptedParam);\n\n    if (!expectedParamMatchesRequest) {\n      return new Response(401, {}, errorMessage);\n    }\n\n    return new Response(200, headers, responseData);\n  });\n\n  mockServer.delete('/users/tokens', () => {\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    const responseData = {};\n\n    return new Response(200, headers, responseData);\n  });\n};\n\nexport default addRoutesToMockServer;\n","/* eslint-disable import/prefer-default-export */\nimport userData from './userData.json';\n\nconst getUsers = JSON.parse(JSON.stringify(userData));\n\nexport default getUsers;\n","import { Server, Model } from 'miragejs';\nimport addRoutesToMockServer from './addRoutesToMockServer';\nimport getUsers from './users';\n\nconst mockServer = new Server({\n  models: {\n    users: Model,\n  },\n\n  seeds(server) {\n    getUsers.data.forEach((user) => {\n      server.schema.users.create(user);\n    });\n  },\n});\n\naddRoutesToMockServer(mockServer);\n\nexport default mockServer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './mockServer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}